# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: MSBuild

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  # Path to the solution file relative to the root of the project.
  SOLUTION_FILE_PATH: .

  # Configuration type to build.
  # You can convert this to a build matrix if you need coverage of multiple configuration types.
  # https://docs.github.com/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
  BUILD_CONFIGURATION: Release

permissions:
  contents: read

jobs:
  build:
    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v4

    - name: Add MSBuild to PATH
      uses: microsoft/setup-msbuild@v1.0.2

    - name: Restore NuGet packages
      working-directory: ${{env.GITHUB_WORKSPACE}}
      run: nuget restore ${{env.SOLUTION_FILE_PATH}}

    - name: Build
      working-directory: ${{env.GITHUB_WORKSPACE}}
      run: msbuild /m /p:Configuration=${{env.BUILD_CONFIGURATION}} ${{env.SOLUTION_FILE_PATH}}

    - name: Get latest tag
      id: get_latest_tag
      run: |
        git fetch --tags
        $latestTag = git describe --tags `git rev-list --tags --max-count=1`
        if (-not $latestTag) { $latestTag = "v1.0.0" }
        Write-Host "Latest tag: $latestTag"
        echo "LATEST_TAG=$latestTag" >> $env:GITHUB_ENV

    - name: Increment version and create new tag
      id: tag_version
      run: |
        $latestTag = "${{ env.LATEST_TAG }}"
        $versionPattern = "^v(\d+)\.(\d+)\.(\d+)$"
        if ($latestTag -match $versionPattern) {
          $major = [int]$matches[1]
          $minor = [int]$matches[2]
          $patch = [int]$matches[3] + 1
          $newTag = "v$major.$minor.$patch"
        } else {
          $newTag = "v1.0.1"
        }
        Write-Host "New tag: $newTag"
        git tag $newTag
        git push origin $newTag
        echo "TAG=$newTag" >> $env:GITHUB_ENV

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.tag_version.outputs.TAG }}
        release_name: Release ${{ steps.tag_version.outputs.TAG }}
        draft: false
        prerelease: false

    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: build/output/*.exe
        asset_name: FlipperZero-Updater.exe
        asset_content_type: application/octet-stream
