name: MSBuild

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  # Path to the solution file relative to the root of the project.
  SOLUTION_FILE_PATH: .

  # Configuration type to build.
  # You can convert this to a build matrix if you need coverage of multiple configuration types.
  # https://docs.github.com/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
  BUILD_CONFIGURATION: Release

permissions:
  contents: read

jobs:
  build:
    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v4

    - name: Add MSBuild to PATH
      uses: microsoft/setup-msbuild@v1.0.2

    - name: Restore NuGet packages
      working-directory: ${{env.GITHUB_WORKSPACE}}
      run: nuget restore ${{env.SOLUTION_FILE_PATH}}

    - name: Build
      working-directory: ${{env.GITHUB_WORKSPACE}}
      # Add additional options to the MSBuild command line here (like platform or verbosity level).
      # See https://docs.microsoft.com/visualstudio/msbuild/msbuild-command-line-reference
      run: msbuild /m /p:Configuration=${{env.BUILD_CONFIGURATION}} ${{env.SOLUTION_FILE_PATH}}

    - name: Upload a Build Artifact
      uses: actions/upload-artifact@v3.2.0-node20
      with:
        name: FlipperZero-Updater
        path: "*.exe"
        if-no-files-found: warn
        retention-days: 1
        include-hidden-files: false

    - name: Publish GitHub Release Artifacts
      uses: SierraSoftworks/gh-releases@v1.0.7
      with:
        files: |
          bin/release-windows/your_executable_name.exe
          bin/release-linux/your_executable_name
        token: ${{ secrets.REPO_ACCESS_TOKEN }}

        # Overwrite existing artifacts with the same name for the specified release.
        overwrite: true

        # The release tag which should receive the artifacts.
        # By default, this will be discovered based on the build environment,
        # but you may specify it here if automatic discovery does not work for your use case.
        release_tag: latest

        # The Hashicorp Vault server which should be used to generate signatures.
        # Uncomment and set if you are using Vault for signature generation.
        # vault-server: https://vault.yourdomain.com

        # The token used to access Hashicorp Vault for generation of signatures.
        # Uncomment and set if you are using Vault for signature generation.
        # vault-token: ${{ secrets.VAULT_TOKEN }}

        # The path that the Vault transit engine is mounted at (defaults to 'transit').
        # Uncomment and set if you are using Vault for signature generation.
        # vault-path: transit

        # The name of the signing key to use for signature generation through Vault.
        # Uncomment and set if you are using Vault for signature generation.
        # vault-signing-key: your-signing-key

        # The hash algorithm which should be used to generate a unique hash for the content being signed.
        # Uncomment and set if you are using Vault for signature generation.
        # vault-hash-algorithm: sha256
