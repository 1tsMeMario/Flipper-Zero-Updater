name: MSBuild

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  # Path to the solution file relative to the root of the project.
  SOLUTION_FILE_PATH: .

  # Configuration type to build.
  # You can convert this to a build matrix if you need coverage of multiple configuration types.
  # https://docs.github.com/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
  BUILD_CONFIGURATION: Release

permissions:
  contents: write

jobs:
  build:
    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v4

    - name: Add MSBuild to PATH
      uses: microsoft/setup-msbuild@v1.0.2

    - name: Restore NuGet packages
      working-directory: ${{ env.GITHUB_WORKSPACE }}
      run: nuget restore ${{ env.SOLUTION_FILE_PATH }}

    - name: Build
      working-directory: ${{ env.GITHUB_WORKSPACE }}
      run: msbuild /m /p:Configuration=${{ env.BUILD_CONFIGURATION }} ${{ env.SOLUTION_FILE_PATH }}

    - name: Create a new tag
      id: tag_version
      run: |
        git fetch --tags
        $currentDate = Get-Date -Format "yyyyMMddHHmmss"
        $NEW_TAG = "v$currentDate"
        git tag $NEW_TAG
        git push origin $NEW_TAG
        echo "tag=$NEW_TAG" >> $env:GITHUB_ENV
      shell: pwsh
      env:
        GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}

    - name: Create GitHub Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}
      with:
        tag_name: ${{ env.tag }}
        release_name: "Release ${{ env.tag }}"
        body: "Automatic release from GitHub Actions"
        draft: false
        prerelease: false
