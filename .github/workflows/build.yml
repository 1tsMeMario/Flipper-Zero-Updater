name: MSBuild

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  # Path to the solution file relative to the root of the project.
  SOLUTION_FILE_PATH: .

  # Configuration type to build.
  # You can convert this to a build matrix if you need coverage of multiple configuration types.
  # https://docs.github.com/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
  BUILD_CONFIGURATION: Release

permissions:
  contents: read

jobs:
  build:
    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v4

    - name: Add MSBuild to PATH
      uses: microsoft/setup-msbuild@v1.0.2

    - name: Restore NuGet packages
      working-directory: ${{env.GITHUB_WORKSPACE}}
      run: nuget restore ${{env.SOLUTION_FILE_PATH}}

    - name: Build
      working-directory: ${{env.GITHUB_WORKSPACE}}
      # Add additional options to the MSBuild command line here (like platform or verbosity level).
      # See https://docs.microsoft.com/visualstudio/msbuild/msbuild-command-line-reference
      run: msbuild /m /p:Configuration=${{env.BUILD_CONFIGURATION}} ${{env.SOLUTION_FILE_PATH}}

    - name: Upload a Build Artifact
      uses: actions/upload-artifact@v3.2.0-node20
      with:
        name: FlipperZero-Updater
        path: "*.exe"
        if-no-files-found: warn
        retention-days: 1
        include-hidden-files: false

    - name: Create a new tag
      id: tag_version
      run: |
       git fetch --tags
       NEW_TAG="v$(date +'%Y%m%d%H%M%S')"
       git tag $NEW_TAG
       git push origin $NEW_TAG
       echo "tag=$NEW_TAG" >> $GITHUB_ENV

    - name: Publish GitHub Release Artifacts
      uses: SierraSoftworks/gh-releases@v1.0.7
      with:
        files: |
          build/output/FlipperZero-Updater.exe
        token: ${{ secrets.REPO_ACCESS_TOKEN }}
        overwrite: true
        release_tag: ${{ env.tag }}
